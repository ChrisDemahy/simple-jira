// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}
generator client {
	provider = "prisma-client-js"
}
model Project {
	id String @unique @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	name String 
	description String? 
	issues Issue[] @relation(name: "ProjectIssue")
}
model User {
	id String @unique @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	userInformation UserData @relation(name: "UserInformationFields", fields: [userInformationId], references: [id])
	userInformationId String @unique
	role Role @default(USER)
	comments Comment[] @relation(name: "CommentToUser")
	gagsButt Boolean 
	reporterIssues Issue[] @relation(name: "IssueReporters")
	participantIssues Issue[] @relation(name: "IssueParticipants")
	Issue Issue[] @relation(name: "AssignedUser")
	watchedIssues Issue[] @relation(name: "WatchingUsers")
}
model Comment {
	id String @unique @id @default(uuid())
	user User @relation(name: "CommentToUser", fields: [userId], references: [id])
	userId String 
	issue Issue @relation(name: "CommentToIssue", fields: [issueId], references: [id])
	issueId String 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
model UserData {
	id String @unique @id @default(uuid())
	user User? @relation(name: "UserInformationFields")
	userId String @unique
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	mail String @unique
	firstName String? 
	lastName String? 
	address String? 
	city String? 
	office String? 
	phone String? 
	ipPhone String? 
	mobile Int? 
}
model Issue {
	id String @unique @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	summary String 
	description String? 
	status IssueStatus @default(CREATED)
	type IssueType @default(EMAILREQUEST)
	priority IssuePriority @default(MINOR)
	it4it Boolean @default(false)
	reporter User @relation(name: "IssueReporters", fields: [reporterId], references: [id])
	reporterId String 
	participants User[] @relation(name: "IssueParticipants")
	assignee User? @relation(name: "AssignedUser", fields: [assigneeId], references: [id])
	assigneeId String 
	watchers User[] @relation(name: "WatchingUsers")
	project Project @relation(name: "ProjectIssue", fields: [projectId], references: [id])
	projectId String 
	comments Comment[] @relation(name: "CommentToIssue")
}
model Site {
	id String @unique @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	siteName String 
	siteCode String 
}
model Category {
	id String @unique @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	name String 
}
enum Role {
	SERVICEDESK
	USER
	ADMIN
}
enum IssueStatus {
	CREATED
	OPEN
	PENDINGSUPPORT
	INPROGRESS
	RESOLVED
	CLOSED
}
enum IssuePriority {
	LOW
	MINOR
	MAJOR
	BLOCKING
}
enum IssueType {
	EMAILREQUEST
	PHONEREQUEST
	SERVICEREQUEST
	INCIDENT
}