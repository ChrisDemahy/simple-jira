// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SERVICEDESK
  USER
  ADMIN
}

model User {
  id                String    @id @unique @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  // User information
  email             String    @unique
  firstName         String
  lastName          String
  // User role in the system. Admins can create projects, etc
  role              Role      @default(USER)
  // Issues the user has preported
  reporterIssues    Issue[]   @relation("IssueReporters")
  // Issues the user is a participant (commented)
  participantIssues Issue[]   @relation("IssueParticipants")
  // comments the user has created across all issues
  comments          Comment[]
  Issue             Issue[]   @relation("AssignedUser")
}

enum IssueStatus {
  // Issue is at the service desk
  CREATED
  OPEN
  // Issue is at primary support level
  PENDINGSUPPORT
  INPROGRESS
  // When an issue is resolved the reporter gets 5 days
  //    to reply by email to reopen the ticket or the ticket
  //    can be repopened manually
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MINOR
  MAJOR
  BLOCKING
}

// TODO Make this dynamic by the project
enum IssueType {
  // Issue is with service desk
  EMAILREQUEST
  PHONEREQUEST
  // Issue is with primary support team
  SERVICEREQUEST
  INCIDENT
}

// Issues are like tickets in most ticket systems (Jira is a project management system)
model Issue {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Brief summary (~10 words)
  summary     String
  // Longer description of the issue the user is reporting
  description String?

  // Enums
  // Status of the issue
  status   IssueStatus   @default(CREATED)
  // Whether the ticket is a service desk ticket or service request or incident
  type     IssueType     @default(EMAILREQUEST)
  // The priority of the ticket
  priority IssuePriority @default(MINOR)

  // IT4IT is to indicate that the ticket is for other IT
  //    users so people can priority fellow employees
  it4it Boolean @default(false)

  // Users
  // Issues are reported (created) by users
  reporter   User   @relation("IssueReporters", fields: [reporterId], references: [id])
  reporterId String

  // Request Participants
  participants User[] @relation("IssueParticipants")
  // User assigned the ticekt
  assignee     User?  @relation("AssignedUser", fields: [assigneeId], references: [id])
  assigneeId   String

  // Project
  // Issues belong to projects
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
  // comments by users regarding the ticket
  comments  Comment[]

  // Users watching the issue
}

// Comments are created by users and are for communication and to document work
model Comment {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Comments are created by users
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // Comments belong to an issue
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   String
}

model Project {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Project information
  name        String
  description String?
  // logo image, etc

  // A project has issues that track work done on the project
  issues Issue[]
  // creator User (only Admin)
  // users User[]
}
